"""autogenerated by genpy from kurosp/BlockSendTrajectoryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kurosp.msg

class BlockSendTrajectoryRequest(genpy.Message):
  _md5sum = "ae5f28d08d9a50a9cf93f77fdd3565d1"
  _type = "kurosp/BlockSendTrajectoryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """XyzYprTrajectory trajectory

================================================================================
MSG: kurosp/XyzYprTrajectory
Info info
XyzYpr[] frames

================================================================================
MSG: kurosp/Info
uint8 response_mode #= 3 # KUKA_RMODE_STREAM
uint32 response_ms #= 20 # [ms]
uint32 traj_id #= 666 # a trajectory id
bool run #= 1 # YES
uint32 vel #= 200 # [mm/s]
uint32 tol #= 20 # [mm]
uint8 frame_type #= 1 # KUKA_CARTESIAN

================================================================================
MSG: kurosp/XyzYpr
float64[6] xyzypr

"""
  __slots__ = ['trajectory']
  _slot_types = ['kurosp/XyzYprTrajectory']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BlockSendTrajectoryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = kurosp.msg.XyzYprTrajectory()
    else:
      self.trajectory = kurosp.msg.XyzYprTrajectory()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2IB2IB.pack(_x.trajectory.info.response_mode, _x.trajectory.info.response_ms, _x.trajectory.info.traj_id, _x.trajectory.info.run, _x.trajectory.info.vel, _x.trajectory.info.tol, _x.trajectory.info.frame_type))
      length = len(self.trajectory.frames)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.frames:
        buff.write(_struct_6d.pack(*val1.xyzypr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = kurosp.msg.XyzYprTrajectory()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.trajectory.info.response_mode, _x.trajectory.info.response_ms, _x.trajectory.info.traj_id, _x.trajectory.info.run, _x.trajectory.info.vel, _x.trajectory.info.tol, _x.trajectory.info.frame_type,) = _struct_B2IB2IB.unpack(str[start:end])
      self.trajectory.info.run = bool(self.trajectory.info.run)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.frames = []
      for i in range(0, length):
        val1 = kurosp.msg.XyzYpr()
        start = end
        end += 48
        val1.xyzypr = _struct_6d.unpack(str[start:end])
        self.trajectory.frames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2IB2IB.pack(_x.trajectory.info.response_mode, _x.trajectory.info.response_ms, _x.trajectory.info.traj_id, _x.trajectory.info.run, _x.trajectory.info.vel, _x.trajectory.info.tol, _x.trajectory.info.frame_type))
      length = len(self.trajectory.frames)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.frames:
        buff.write(val1.xyzypr.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = kurosp.msg.XyzYprTrajectory()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.trajectory.info.response_mode, _x.trajectory.info.response_ms, _x.trajectory.info.traj_id, _x.trajectory.info.run, _x.trajectory.info.vel, _x.trajectory.info.tol, _x.trajectory.info.frame_type,) = _struct_B2IB2IB.unpack(str[start:end])
      self.trajectory.info.run = bool(self.trajectory.info.run)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.frames = []
      for i in range(0, length):
        val1 = kurosp.msg.XyzYpr()
        start = end
        end += 48
        val1.xyzypr = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        self.trajectory.frames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_B2IB2IB = struct.Struct("<B2IB2IB")
"""autogenerated by genpy from kurosp/BlockSendTrajectoryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BlockSendTrajectoryResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "kurosp/BlockSendTrajectoryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success



"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BlockSendTrajectoryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _struct_B.unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class BlockSendTrajectory(object):
  _type          = 'kurosp/BlockSendTrajectory'
  _md5sum = '244e5565eb5f6feacf78a0491f04db4a'
  _request_class  = BlockSendTrajectoryRequest
  _response_class = BlockSendTrajectoryResponse
